/*
 * Always On Mobile - hullo API
 * Welcome to the hullo API.    With this API you can perform operations on your hullo account programmatically that you can call using the hullo console. The operations currently available include:    * Add / Update a member * Get the details of a member * Get the messages sent / received from a member * Send a message to a member  The hullo API is an easy to use RESTful API that can be called by any modern programming language that  supports HTTP calls, and also has out of the box support for several programming languages including:   * Java * Javascript    In order to use the API you will first need to generate an API key using the hullo console application, assigning it the the relevant scopes required for the operations you wish to call. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.alwaysonmobile.hullo.api.client;

import io.alwaysonmobile.hullo.api.ApiException;
import io.alwaysonmobile.hullo.api.client.GenericError;
import io.alwaysonmobile.hullo.api.client.Message;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Ignore
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    /**
     * Send a message
     *
     * Allows messages to be sent to members. Members must be fully opted-in in order to be sent a message, otherwise this operation will reject the call. If a message is longer than 160 characters - using the GSM character set (https://en.wikipedia.org/wiki/GSM_03.38) - then the message will be split into multiple 140 character parts.  If any characters fall outside of the supported GSM character set then the message will be converted to UTF-16 (https://en.wikipedia.org/wiki/UTF-16) and split into multiple 70 character parts. The parts will be reconstructed and displayed to the member as a single message on their handset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMessageTest() throws ApiException {
        Message message = null;
        Message response = api.createMessage(message);

        // TODO: test validations
    }
    /**
     * Gets the messages for a specific subscriber
     *
     * Retrieves any messages sent / received for a specific subscriber. The messages will be ordered by date  descending, so the newest messages will appear at the top.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagesTest() throws ApiException {
        String phoneNumber = null;
        Integer limit = null;
        List<Message> response = api.getMessages(phoneNumber, limit);

        // TODO: test validations
    }
}
